'use strict';

/* Controllers */

angular.module('myApp.controllers', []).
  controller('MyCtrl1', ['$scope', function($scope) {

    $scope.entries = [
      {
        0: "Bob",
        1: "bob@bob.com",
        2: "如何评价大卫·斯特恩？",
        3: "节日必备之 Mac Game：BombSquad。 Chopper 2、FIFA、Real Racing 等不少游戏都支持将 iPhone 虚拟成手柄来控制，但它们总会让你产生扔掉 iPhone 去换个真手柄的冲动：iPhone 肯定没有手柄好用，于是新鲜之余游戏体验并没有实质提升，反而被蹩脚的操作拖了后腿。 有什么事情会是手柄做不到，却能通过移动设备满足的呢？「同屏多人游戏」可能是一个好答案：你不太可能在一台主机上插上 8 个手柄，再分别交到 8 位朋友手里；但「请大家坐在一起掏出自己的 iPhone / Android 并连上我家的 Wi-Fi」，这事儿就容易多了。 BombSquad 的游戏规则很简单，向朋友推荐时可以说像当年红白机上的《炸弹人》：扔炸弹炸飞别人，同时别被炸弹炸飞就行。独特之处在于，最多支持 8 个玩家同屏互相殴打：没那么多键盘手柄没关系，只要每人掏出自己的智能手机就行：每台手机都是一个「手柄」。 节日必备之 Mac Game：BombSquad。 Chopper 2、FIFA、Real Racing 等不少游戏都支持将 iPhone 虚拟成手柄来控制，但它们总会让你产生扔掉 iPhone 去换个真手柄的冲动：iPhone 肯定没有手柄好用，于是新鲜之余游戏体验并没有实质提升，反而被蹩脚的操作拖了后腿。 有什么事情会是手柄做不到，却能通过移动设备满足的呢？「同屏多人游戏」可能是一个好答案：你不太可能在一台主机上插上 8 个手柄，再分别交到 8 位朋友手里；但「请大家坐在一起掏出自己的 iPhone / Android 并连上我家的 Wi-Fi」，这事儿就容易多了。 BombSquad 的游戏规则很简单，向朋友推荐时可以说像当年红白机上的《炸弹人》：扔炸弹炸飞别人，同时别被炸弹炸飞就行。独特之处在于，最多支持 8 个玩家同屏互相殴打：没那么多键盘手柄没关系，只要每人掏出自己的智能手机就行：每台手机都是一个「手柄」。 节日必备之 Mac Game：BombSquad。 Chopper 2、FIFA、Real Racing 等不少游戏都支持将 iPhone 虚拟成手柄来控制，但它们总会让你产生扔掉 iPhone 去换个真手柄的冲动：iPhone 肯定没有手柄好用，于是新鲜之余游戏体验并没有实质提升，反而被蹩脚的操作拖了后腿。 有什么事情会是手柄做不到，却能通过移动设备满足的呢？「同屏多人游戏」可能是一个好答案：你不太可能在一台主机上插上 8 个手柄，再分别交到 8 位朋友手里；但「请大家坐在一起掏出自己的 iPhone / Android 并连上我家的 Wi-Fi」，这事儿就容易多了。 BombSquad 的游戏规则很简单，向朋友推荐时可以说像当年红白机上的《炸弹人》：扔炸弹炸飞别人，同时别被炸弹炸飞就行。独特之处在于，最多支持 8 个玩家同屏互相殴打：没那么多键盘手柄没关系，只要每人掏出自己的智能手机就行：每台手机都是一个「手柄」。 节日必备之 Mac Game：BombSquad。 Chopper 2、FIFA、Real Racing 等不少游戏都支持将 iPhone 虚拟成手柄来控制，但它们总会让你产生扔掉 iPhone 去换个真手柄的冲动：iPhone 肯定没有手柄好用，于是新鲜之余游戏体验并没有实质提升，反而被蹩脚的操作拖了后腿。 有什么事情会是手柄做不到，却能通过移动设备满足的呢？「同屏多人游戏」可能是一个好答案：你不太可能在一台主机上插上 8 个手柄，再分别交到 8 位朋友手里；但「请大家坐在一起掏出自己的 iPhone / Android 并连上我家的 Wi-Fi」，这事儿就容易多了。 BombSquad 的游戏规则很简单，向朋友推荐时可以说像当年红白机上的《炸弹人》：扔炸弹炸飞别人，同时别被炸弹炸飞就行。独特之处在于，最多支持 8 个玩家同屏互相殴打：没那么多键盘手柄没关系，只要每人掏出自己的智能手机就行：每台手机都是一个「手柄」。"
      },
      {
        0: "Joe",
        1: "joe@bob.com",
        2: "Title Title Title",
        3: "Content content. Content content. Content content."
      },
      {
        0: "usrnam",
        1: "usrnam@bob.com",
        2: "有没有把 Mac 当作主机，iPhone 当作控制设备的游戏？",
        3: "节日必备之 Mac Game：BombSquad。 Chopper 2、FIFA、Real Racing 等不少游戏都支持将 iPhone 虚拟成手柄来控制，但它们总会让你产生扔掉 iPhone 去换个真手柄的冲动：iPhone 肯定没有手柄好用，于是新鲜之余游戏体验并没有实质提升，反而被蹩脚的操作拖了后腿。 有什么事情会是手柄做不到，却能通过移动设备满足的呢？「同屏多人游戏」可能是一个好答案：你不太可能在一台主机上插上 8 个手柄，再分别交到 8 位朋友手里；但「请大家坐在一起掏出自己的 iPhone / Android 并连上我家的 Wi-Fi」，这事儿就容易多了。 BombSquad 的游戏规则很简单，向朋友推荐时可以说像当年红白机上的《炸弹人》：扔炸弹炸飞别人，同时别被炸弹炸飞就行。独特之处在于，最多支持 8 个玩家同屏互相殴打：没那么多键盘手柄没关系，只要每人掏出自己的智能手机就行：每台手机都是一个「手柄」。 节日必备之 Mac Game：BombSquad。 Chopper 2、FIFA、Real Racing 等不少游戏都支持将 iPhone 虚拟成手柄来控制，但它们总会让你产生扔掉 iPhone 去换个真手柄的冲动：iPhone 肯定没有手柄好用，于是新鲜之余游戏体验并没有实质提升，反而被蹩脚的操作拖了后腿。 有什么事情会是手柄做不到，却能通过移动设备满足的呢？「同屏多人游戏」可能是一个好答案：你不太可能在一台主机上插上 8 个手柄，再分别交到 8 位朋友手里；但「请大家坐在一起掏出自己的 iPhone / Android 并连上我家的 Wi-Fi」，这事儿就容易多了。 BombSquad 的游戏规则很简单，向朋友推荐时可以说像当年红白机上的《炸弹人》：扔炸弹炸飞别人，同时别被炸弹炸飞就行。独特之处在于，最多支持 8 个玩家同屏互相殴打：没那么多键盘手柄没关系，只要每人掏出自己的智能手机就行：每台手机都是一个「手柄」。 节日必备之 Mac Game：BombSquad。 Chopper 2、FIFA、Real Racing 等不少游戏都支持将 iPhone 虚拟成手柄来控制，但它们总会让你产生扔掉 iPhone 去换个真手柄的冲动：iPhone 肯定没有手柄好用，于是新鲜之余游戏体验并没有实质提升，反而被蹩脚的操作拖了后腿。 有什么事情会是手柄做不到，却能通过移动设备满足的呢？「同屏多人游戏」可能是一个好答案：你不太可能在一台主机上插上 8 个手柄，再分别交到 8 位朋友手里；但「请大家坐在一起掏出自己的 iPhone / Android 并连上我家的 Wi-Fi」，这事儿就容易多了。 BombSquad 的游戏规则很简单，向朋友推荐时可以说像当年红白机上的《炸弹人》：扔炸弹炸飞别人，同时别被炸弹炸飞就行。独特之处在于，最多支持 8 个玩家同屏互相殴打：没那么多键盘手柄没关系，只要每人掏出自己的智能手机就行：每台手机都是一个「手柄」。 节日必备之 Mac Game：BombSquad。 Chopper 2、FIFA、Real Racing 等不少游戏都支持将 iPhone 虚拟成手柄来控制，但它们总会让你产生扔掉 iPhone 去换个真手柄的冲动：iPhone 肯定没有手柄好用，于是新鲜之余游戏体验并没有实质提升，反而被蹩脚的操作拖了后腿。 有什么事情会是手柄做不到，却能通过移动设备满足的呢？「同屏多人游戏」可能是一个好答案：你不太可能在一台主机上插上 8 个手柄，再分别交到 8 位朋友手里；但「请大家坐在一起掏出自己的 iPhone / Android 并连上我家的 Wi-Fi」，这事儿就容易多了。 BombSquad 的游戏规则很简单，向朋友推荐时可以说像当年红白机上的《炸弹人》：扔炸弹炸飞别人，同时别被炸弹炸飞就行。独特之处在于，最多支持 8 个玩家同屏互相殴打：没那么多键盘手柄没关系，只要每人掏出自己的智能手机就行：每台手机都是一个「手柄」。"
      }
    ]

    $scope.selectedIndex = 0;

    $scope.itemClicked = function ($index) {
      // console.log($index);
      $scope.selectedIndex = $index;
    }

    $scope.author = $scope.entries[0][0];
    $scope.title = $scope.entries[0][2];
    $scope.content = $scope.entries[0][3];

    $scope.setEntry = function(entry) {
      $scope.author = entry[0];
      $scope.title = entry[2];
      $scope.content = entry[3];
    };

  }])
  .controller('MyCtrl2', ['$scope', function($scope) {

  }]);